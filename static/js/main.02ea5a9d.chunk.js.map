{"version":3,"sources":["utils/keys.js","utils/API.js","components/CityButtons/index.js","components/JumboGraph/index.js","components/MainComponent/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","openWeather","APIKEY","API","getWeather","city","axios","get","concat","keys","CityButtons","props","react_default","a","createElement","className","cities","map","name","value","type","onClick","e","submit","JumboGraph","chartData","weatherData","es6","width","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","domain","stroke","MainComponent","state","weather","cityList","then","res","_this","setState","list","catch","err","console","log","handleInputChange","event","_event$target","target","Object","defineProperty","handleButttonSubmit","_this2","this","id","components_CityButtons","components_JumboGraph","Component","App","components_MainComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02ea5a9d.chunk.js","sourcesContent":["module.exports = {\r\n    openWeather: {\r\n        APIKEY: \"ea5e0c43f629fa52f7b65eb894ba50e7\"\r\n    }\r\n}","import axios from \"axios\";\r\nimport keys from \"./keys\"\r\n\r\nexport default {\r\n    \r\ngetWeather: function (city) {\r\n    return axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=imperial&APPID=${keys.openWeather.APIKEY}`)\r\n}\r\n\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\n\r\n\r\nexport function CityButtons(props) {\r\n    return (\r\n        <div className=\"row\">\r\n        {props.cities.map(city => (\r\n            <button\r\n            name=\"city\"\r\n            value={city}\r\n            type=\"button\" \r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={e => props.submit(city)}\r\n            >\r\n            {city}\r\n            </button>\r\n        ))}\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CityButtons","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\n\r\n\r\nexport function JumboGraph(props) {\r\n    const chartData = props.weatherData\r\n    return (\r\n        <div className=\"jumbotron-fluid\">\r\n        \r\n            <h1>Temperature Forecast for {props.city}</h1>\r\n            <LineChart width={900} height={400} data={chartData}\r\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"dt_txt\"/>\r\n                <YAxis type=\"number\" domain={['dataMin - 10', 'dataMax + 10']} />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Line type=\"monotone\" dataKey=\"main.temp_min\" stroke=\"#8884d8\" />\r\n                <Line type=\"monotone\" dataKey=\"main.temp_max\" stroke=\"#82ca9d\" />\r\n            </LineChart>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default JumboGraph","import React, { Component } from \"react\";\r\nimport API from \"../../utils/API\";\r\nimport CityButtons from \"../CityButtons/index\"\r\nimport JumboGraph from \"../JumboGraph/index\"\r\nimport \"./style.css\";\r\n\r\n\r\nclass MainComponent extends Component {\r\n    state = {\r\n        weather: [],\r\n        city: \"New York\",\r\n        cityList: [\"New York\", \"Dallas\", \"Seattle\", \"Chicago\", \"Miami\"]\r\n    };\r\n\r\n    componentDidMount() {\r\n        API.getWeather(this.state.city)\r\n            .then(res => {\r\n                this.setState({ weather: res.data.list, city: res.data.city.name })\r\n            })\r\n    }\r\n\r\n    getWeather = (city) => {\r\n        API.getWeather(city)\r\n        .then(res => {\r\n            this.setState({ weather: res.data.list })\r\n        })\r\n        .catch(err => console.log(err))\r\n    } \r\n\r\n    handleInputChange = event => {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n\r\n    };\r\n\r\n    handleButttonSubmit = (event) => {\r\n        this.setState({ city: event })\r\n        this.getWeather(event);\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"container\" id=\"mainWrapper\">\r\n                    <CityButtons\r\n                        cities={this.state.cityList}\r\n                        submit={this.handleButttonSubmit}\r\n\r\n                    />\r\n                    <JumboGraph\r\n                        weatherData={this.state.weather}\r\n                        city={this.state.city}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MainComponent;","import React, { Component } from \"react\";\nimport MainComponent from \"./components/MainComponent\"\nimport './App.css';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <MainComponent />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}